#!/bin/bash
#
# install1 - configure a new Linux for a Minimy or OVOS installation
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "install1 - configure Linux for Minimy, Neon or OVOS"
  echo "Usage: install1 [OPTIONS]" 
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -m|--minimy       Configure for Minimy (default)"
  echo "  -n|--neon         Configure for Neon"
  echo "  -o|--ovos         Configure for OVOS"
  echo "  -v|--verbose      Increase verbosity"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  echo ""
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -v|--verbose)
        verbose=2
        flags="-v"
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
        echo "ERROR: Too many arguments: $1"
        usage
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function getPlatform
# Set platform to either "Raspberry Pi" or "NVIDIA Jetson" else exit 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  platform=`cat /proc/device-tree/model | awk '{print $1 " " $2}'`
  if [ "$platform" != "Raspberry Pi" -a "$platform" != "NVIDIA Jetson"; then
    echo "ERROR: only NVIDIA Jetson and Raspberry Pi platforms are supported"
    exit 1
  fi
 }                                         # getPlatform()

#+--------------------------------------------------------------------------+
function checkOvosTools
# Check that ovos-tools is installed in $HOME 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  baseDir="$HOME/ovos-tools"
  if [ ! -d $baseDir ]; then
    echo "ERROR: Did not find ovos-tools in $baseDir"
    exit 1
  fi
 }                                         # checkOvosTools()

#+--------------------------------------------------------------------------+
function runCmd
# run a command, report time spent and exit if it fails
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  cmd="$@"                                 # all args

  echo " " 
  echo "Running: $cmd" | tee -a $outFile
  eval $cmd 2>&1 | tee -a $outFile
  rc=$?
  if [ "$rc" != 0 ]; then                  # it failed
    echo "ERROR: $cmd returned $rc - EXITING!!!" 
    exit 1
  else
    echo "Command was successful!" 
  fi
 }                                         # runCmd()

#+--------------------------------------------------------------------------+
function installCoreqs
# Do the work to install and configure everything to run Mycroft driven by ovos-core
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Upgrading system ..."| tee -a $outFile # start by upgrading system
  runCmd sudo apt-get update
  runCmd sudo apt-get -y -o Dpkg::Options::="--force-confdef" full-upgrade 

  distro=`grep ^PRETTY /etc/os-release | awk -F'"' '{print $2}'` # get the pretty name
  if [ ${#distro} = 0 ]; then
    echo "ERROR: did not find PRETTY_NAME in /etc/os-release" 
    exit 1
  fi
  echo "distro = $distro"
  pyVer=`python3 -V | awk '{print $2}' | awk -F. '{print $1 "." $2}'`
  commonPackages="bind9-dnsutils cifs-utils curl jq mlocate lsof mpc mpd net-tools pandoc python3 python3-pip python3-venv python${pyVer}-venv raspi-config" 

  echo "Installing co-req packages ..."| tee -a $outFile
  for nextPkg in $commonPackages; do  
    runCmd sudo apt-get --quiet install -y $nextPkg
  done
  
  runCmd sudo apt-get --quiet -o Dpkg::Options::="--force-confold" install -y $nextPkg

  if [ "$platform" = "NVIDIA Jetson" ]; then # on an Nvidia GPU 
    echo "NOT installing pipewire and GPIO packages on Nvidia Jetson" | tee -a $outFile
  else                                     # assume RasPi
    for nextPkg in "pipewire pipewire-audio-client-libraries pipewire-pulse python3-rpi.gpio wireplumber"; do
      runCmd sudo apt-get --quiet install -y $nextPkg 
    done
  fi   

  grep ^mpd /etc/passwd >/dev/null 2>&1
  if [ $? != 0 ]; then                     # user mpd does not exist
    echo "Creating user mpd ..."| tee -a $outFile
    runCmd sudo useradd --system -d /home/mpd --group audio --shell /usr/sbin/nologin mpd
    runCmd sudo chown -R mpd:audio /var/lib/mpd /var/log/mpd /etc/mpd.conf
  else
    echo "user mpd already exists ..."| tee -a $outFile
  fi
  if [ ! -x /etc/systemd/system/mpd.service ]; then # mpd service does not exist
    echo "Copying mpd.service file and enabling mpd ..."| tee -a $outFile
    runCmd cp $baseDir/mpd.service /etc/systemd/system
    runCmd sudo systemctl enable mpd
  else
    echo "mpd.service file already exists ..."| tee -a $outFile
  fi 

  if [ ! -f /etc/vim/vimrc.orig ]; then    # never copied original
    runCmd sudo cp /etc/vim/vimrc /etc/vim/vimrc.orig
  fi    
  echo "Copying vimrc ..." | tee -a $outFile
  runCmd sudo cp $HOME/ovos-tools/vimrc /etc/vim
  echo
  
  echo "Adding groups to user pi ..." | tee -a $outFile
  runCmd sudo usermod -a -G audio,video,dialout,kmem pi
  echo "Adding groups to user mpd ..." | tee -a $outFile
  runCmd sudo usermod -a -G pi,users mpd
  echo "Adding groups spi, i2c and gpio to /etc/group ..." | tee -a $outFile
  sudo groupadd -g 993 spi | tee -a $outFile
  sudo groupadd -g 994 i2c | tee -a $outFile
  sudo groupadd -g 993 gpio | tee -a $outFile
  echo
  echo "Copying .bash_profile ..."  | tee -a $outFile
  runCmd cp $HOME/ovos-tools/minimy_profile $HOME/.bash_profile
  
  # turn default and vc4 audio off, don't disable monitor overscan
  cd /boot/firmware 
  if [ ! -f config.txt.orig ]; then
    echo "Customizing boot parameters ..."  | tee -a $outFile
    runCmd sudo cp config.txt config.txt.orig
    sudo sed -i -e 's/dtparam=audio=on/dtparam=audio=off\ndtparam=spi=off/g' \
                -e 's/^disable_overscan/# disable_overscan/g' \
                -e 's/^dtoverlay=vc4-kms-v3/# dtoverlay=vc4-kms-v3/g' config.txt
    local piModel=`cat /sys/firmware/devicetree/base/model | awk '{print $3}'`
    if [ "$piModel" = 5 ]; then            # 3 lines to get HiFiBerry running on a RasPi 5
      echo "dtoverlay=vc4-kms-v3d,noaudio" | sudo tee -a config.txt
      echo "dtoverlay=hifiberry-dacplus,slave" | sudo tee -a config.txt
      echo "force_eeprom_read=0" | sudo tee -a config.txt
    else                                   # assume RasPi 4
      echo "dtoverlay=hifiberry-dacplus-pro" | sudo tee -a config.txt # add hifiberry driver
    fi
  fi  
  
  # vim - traditional defaults, mouse works
  echo "Removing annoying autoindent from vim ..."  | tee -a $outFile
  if [ ! -d $HOME/.vim ]; then
    runCmd mkdir $HOME/.vim 
    cd $HOME/.vim
    echo "set noautoindent" >> vimrc
    echo "set nocindent" >> vimrc
    echo "set nosmartindent" >> vimrc
    echo "set mouse=r" >> vimrc
  fi  
  
  # configure mpd
  if [ -f /etc/mpd.conf -a ! -f /etc/mpd.conf.orig ]; then # no backup has been made
    echo "Making backup of /etc/mpd.conf"  | tee -a $outFile 
    runCmd sudo cp /etc/mpd.conf /etc/mpd.conf.orig 
  fi
  if [ ! -d /var/log/mpd ]; then           # no mpd log dir
    sudo mkdir /var/log/mpd     
    sudo chown $USER /var/log/mpd
    sudo touch /var/log/mpd/mpd.log 
  fi
  echo "Copying sample mpd.conf file to /etc" | tee -a $outFile 
  runCmd sudo cp ~/ovos-tools/mpd.conf /etc # copy sample 
  echo "Changing permissons of /etc/mpd.conf" | tee -a $outFile 
  runCmd sudo chmod 644 /etc/mpd.conf  
  echo "Setting mpd to start at boot time" | tee -a $outFile 
  runCmd systemctl --user enable mpd         # start mpd at boot
  if [ "$platform" = "Raspberry Pi" ]; then  # Ras Pi Linux needs pipewire
    echo "Setting pipewire and pipewire-pulse to start at boot time..." | tee -a $outFile
    runCmd systemctl --user enable pipewire pipewire-pulse
  fi
  echo "Disabling bluetooth ..." | tee -a $outFile
  runCmd sudo systemctl disable bluetooth.service

  # configure USB hot plug to mount USB drive over /mnt/usb
  runCmd sudo cp ~/ovos-tools/99-mount-usb.rules /etc/udev/rules.d
  runCmd sudo cp ~/ovos-tools/usb-mount@.service /etc/systemd/system
  runCmd sudo cp ~/ovos-tools/usb-mount.sh /root 
 
  if [ ! -d ~/mpd ]; then                  # create a mpd dir in home directory
    mkdir ~/mpd;
  fi

  # configure network drive to mount over /mnt/share
  first3=`hostname -I | awk '{print $1}' | awk -F'.' '{print $1 "." $2 "." $3}'`
  if [ "$first3" = "192.168.40" ]; then     # assume my subnet
    echo "Configuring network drive to mount over /mnt/share ..." | tee -a $outFile
    if [ ! -f /etc/fstab.orig ]; then      # make a backup copy and add a line
      sudo cp /etc/fstab /etc/fstab.orig
      echo "//LS210D7A7.lan/share   /mnt/share    cifs    user=mike,password=sawdust5,vers=1.0 0 0" | sudo tee -a /etc/fstab
    fi
  fi
  if [ ! -d /mnt/share ]; then             # create directory
    sudo mkdir /mnt/share
    sudo chgrp users /mnt/share
    sudo chmod 777 /mnt/share
  fi
  grep "/mnt/share" /etc/mtab >/dev/null 2>&1
  if [ $? != 0 ]; then                     # dir is not mounted
    runCmd sudo mount /mnt/share
  fi
 }                                         # installCoreqs()

# global variables
timeStamp=`date +"%y-%m-%d-%H-%M-%S"`   
outFile="$HOME/$timeStamp-install1.out"    # output file
platform="unknown"

# main()
getPlatform                                # verify supported platform
parseArgs $@
checkOvosTools                             # verify ovos-tools is installed
echo "Running install1 on $timeStamp to configure minimy ..." > $outFile # create a new log file
installCoreqs                              # do the work
let min=$SECONDS/60
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "Successfully installed co-reqs for minimy in $min:$sec" | tee -a $outFile
echo "Log file: $outFile"

