#!/bin/bash
#
# lsenv - list many aspects of this Minimy or Neon or OVOS environment
#
#+--------------------------------------------------------------------------+
function usage
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsenv - List information about the OVOS environment" 
  echo "Usage: lsenv [OPTIONS]" 
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  --justServices    Just show status of services"
  echo "  -c|--clear        Clear the screen first" 
  echo "  -v|--verbose      Increase verbosity" 
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      --justServices) 
        justServices="yes"
        ;;
      -c|--clear)                          # clear the screen
        clear="yes"
        ;;
      -v|--verbose) 
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
        echo "ERROR: Too many arguments: $1"
        usage
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function verboseMsg
# Print message when in verbose mode
# Args: message
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ "$verbose" -gt 1 ]; then    
    echo "$@"
  fi
 }                                         # verboseMsg()

#+--------------------------------------------------------------------------+
function getPlatform
# Set platform to either "Raspberry Pi" or "NVIDIA Jetson" if detected
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ -f "/proc/device-tree/model" ]; then
    platform=`cat /proc/device-tree/model | awk '{print $1 " " $2}'`
  fi
  if [ "$platform" != "Raspberry Pi" -a "$platform" != "NVIDIA Jetson" ]; then
    echo "WARNING: Only NVIDIA Jetson and Raspberry Pi platforms are supported. Use for testing only."
  fi
 }                                         # getPlatform()

#+--------------------------------------------------------------------------+
function listMinimy
# List the status of Minimy 
# Args: None
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  procs=`ps -ef | grep minimy | grep -v grep`
  if [ ${#procs} = 0 ]; then               # matching process
    printf '%22s\e[31m%s\e[0m\n' "Ovos/Neon/Minimy procs:" " None found"  # in red
  else                                     # Minimy is running
    echo "Minimy processes:"
    if [ "$verbose" = 1 ]; then            # normal output
      userSkills=`echo "$procs" | awk -F/ '{print $NF}' | sort | xargs`
      systemSkills=`ps -ef|grep -E 'python3 framework|python3 skills'|grep -v grep|awk -F/ '{print $NF}'|sed 's/.py//g'|sort|uniq|xargs`
      printf '%24s\e[32m%s\e[0m\n' "Minimy user skills: " "$userSkills"  # in green
      printf '%24s\e[32m%s\e[0m\n' "System skills: " "$systemSkills"     # in green
    else                                   # verbose mode
      echo "$procs" | sed 's/^/    /g'
      ps -ef | grep -E 'python3 framework|python3 skills' | grep -v "grep" | sed 's/^/    /g'
    fi
  fi
 }

#+--------------------------------------------------------------------------+
function listService
# List the status of one service 
# Arg 1: service to list
# Arg 2: "root" or "user" service
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theService=$1
  local serviceType=$2

  local cmd
  local status 
  local initSystem
  # RED="\e[31m"              print in colors
  # GREEN="\e[32m"
  # YELLOW="\e[33m"

  if command -v systemctl &>/dev/null; then # Using SystemD
    initSystem="SystemD"
    if [ "$serviceType" = root ]; then
      cmd="/usr/bin/systemctl status $theService"
    elif [ "$serviceType" = user ]; then
      cmd="/usr/bin/systemctl --user status $theService"
    else                                   # not expected
      echo "INTERNAL ERROR: serviceType = $serviceType"
      exit 4
    fi
  elif command -v openrc &>/dev/null; then # Using OpenRC
    initSystem="OpenRC"
    if [ "$serviceType" = root ]; then
      cmd="/usr/bin/rc-service $theService status"
    elif [ "$serviceType" = user ]; then
      cmd="/usr/bin/rc-service --user $theService status"
    else
      echo "INTERNAL ERROR: serviceType = $serviceType"
      exit 4
    fi
  else
    echo "ERROR: Init system not supported"
    exit 4
  fi
  printf "%22s: " "$theService"
  verboseMsg "Running: $cmd ..." 
  cmdOut=`eval $cmd` 
  verboseMsg "$cmdOut"
  if [ $initSystem = "SystemD" ]; then
    echo "$cmdOut" | grep "Status: \"Started\"" >/dev/null
    if [ $? = 0 ]; then                      # found "active"
      printf '\e[32m%s\e[0m\n' "Started"     # in green
    else
      echo "$cmdOut" | grep " active (" >/dev/null
      if [ $? = 0 ]; then
        printf '\e[32m%s\e[0m\n' "active (running)" # in green
      else
        echo "$cmdOut" | grep "Active: failed" >/dev/null
        if [ $? = 0 ]; then                  # found "failed"
          printf '\e[31m%s\e[0m\n' "failed"  # in red
        else 
          echo "$cmdOut" | grep "code=exited" >/dev/null
          if [ $? = 0 ]; then                # found "exited"
            printf '\e[31m%s\e[0m\n' "exited" # in red
          else
            echo "$cmdOut" | grep "inactive (dead)" >/dev/null
            if [ $? = 0 ]; then              # found "inactive"
              printf '\e[31m%s\e[0m\n' "inactive (dead)" # in red
            else
              echo "Unknown"
            fi
          fi
        fi
      fi
    fi 
  elif [ $initSystem = "OpenRC" ]; then
    echo "$cmdOut" | grep "status: started" >/dev/null
    if [ $? = 0 ]; then                      # found "started"
      printf '\e[32m%s\e[0m\n' "active (running)" # in green
    else
      echo "$cmdOut" | grep "status: stopped" >/dev/null
      if [ $? = 0 ]; then                    # found "stopped"
          printf '\e[31m%s\e[0m\n' "stopped" # in red
      else
        echo "$cmdOut" | grep "status: crashed" >/dev/null
        if [ $? = 0 ]; then                  # found "crashed"
          printf '\e[31m%s\e[0m\n' "failed"  # in red
        fi
      fi
    fi
  else
    echo "UNEXPECTED: initSystem = $initSystem"
  fi
 }                                         # listService()

#+--------------------------------------------------------------------------+
function getCPU
# Get CPU usage for 4 seconds then average iterations 2-4 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local cpu_total=0
  for i in 1 2 3 4; do
    # Get the first line with aggregate of all CPUs 
    cpu_now=($(head -n1 /proc/stat)) 
    # Get all columns but skip the first (which is the "cpu" string) 
    cpu_sum="${cpu_now[@]:1}" 
    # Replace the column seperator (space) with + 
    cpu_sum=$((${cpu_sum// /+})) 
    # Get the delta between two reads 
    cpu_delta=$((cpu_sum - cpu_last_sum)) 
    # Get the idle time Delta 
    cpu_idle=$((cpu_now[4]- cpu_last[4])) 
    # Calc time spent working 
    cpu_used=$((cpu_delta - cpu_idle)) 
    #verboseMsg "cpu_now = $cpu_now cpu_sum = $cpu_sum cpu_delta = $cpu_delta cpu_used = $cpu_used"
    # Calc percentage 
    cpu_usage=$((100 * cpu_used / cpu_delta)) 
    
    # Keep this as last for our next read 
    cpu_last=("${cpu_now[@]}") 
    cpu_last_sum=$cpu_sum 
    
    if [ "$i" != 1 ]; then                 # use iterations 2-4 
      let cpu_total=$cpu_total+$cpu_usage
    fi
    sleep 1 
  done
  let cpu_usage=$cpu_total/3               # calculate average
  printf "%22s: %s\n" "CPU usage" "$cpu_usage%"
 }                                         # getCPU()

#+--------------------------------------------------------------------------+
function listTemp
# lstemp - show the temperature of the Raspberry Pi based on
#          the file /sys/class/thermal/thermal_zone0/temp
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local tempFile="/sys/class/thermal/thermal_zone0/temp"
  if [ ! -f $tempFile ]; then              # file not found
    echo "ERROR: did not find $tempFile"
    exit 1
  fi
  local theTemp=`cat /sys/class/thermal/thermal_zone0/temp` # in thousdandths of degrees celcius
  let theTemp=$theTemp/1000                # convert to degrees Celcius
  let tempF=$theTemp*9/5+32                # convert to degrees Farenheit
  if [ "$theTemp" -gt 80 ]; then           # too hot
    printf "%22s: \e[31m%s\e[0m\n" "CPU temp" "${theTemp}C / ${tempF}F" # in red
  elif [ "$theTemp" -lt 65 ]; then         # cool enough
    printf "%22s: \e[32m%s\e[0m\n" "CPU temperature" "${theTemp}C / ${tempF}F" # in green
  else                                     # getting warm
    printf "%22s: \e[33m%s\e[0m\n" "CPU temperature" "${theTemp}C / ${tempF}F" # in yellow
  fi
 }                                         # listTemp()

#+--------------------------------------------------------------------------+
function tmpfsUsage
# Is the directory passed in using a tmpfs? 
# Arg 1   : directory to mount
# Args 2-n:
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theDir=$1
  shift
  local desc="$@"

  verboseMsg "Calling: mount | grep $theDir | grep tmpfs" 
  mount | grep $theDir | grep tmpfs >/dev/null 2>&1
  if [ $? = 0 ]; then                      # directory is using a tmpfs       
    printf "%30s %20s : \e[32m%s\e[0m\n%s" "$theDir" "$desc" yes 
  else
    printf "%30s %20s : \e[31m%s\e[0m\n%s" "$theDir" "$desc" no 
  fi
 }                                         # getCPU()

#+--------------------------------------------------------------------------+
function soundCheck 
# Check play and record devices 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  spkrs=`aplay -l 2>&1 | grep ^card | head -1`
  numSpkrs=`echo "$spkrs" | wc -l`
  spkrsCard=`echo "$spkrs" | awk -F"," '{print $1}'`
  spkrsDevice=`echo "$spkrs" | awk -F"," '{print $2}' | sed 's/^ //g'`
  mics=`arecord -l 2>&1 | grep ^card | head -1`
  numMics=`echo "$mics" | wc -l`
  micsCard=`echo "$mics" | awk -F"," '{print $1}'`
  micsDevice=`echo "$mics" | awk -F"," '{print $2}' | sed 's/^ //g'`
  if [ $numMics = 0 ]; then 
    echo "WARNING: no microphones found"
  else
    echo "Mic     : $micsCard" 
    echo "          $micsDevice" 
  fi  
  if [ $numSpkrs = 0 ]; then 
    echo "WARNING: no speakers found"
  else
    echo "Speakers: $spkrsCard" 
    echo "          $spkrsDevice" 
  fi
  echo "Playing : /usr/share/sounds/alsa/Front_Center.wav"
  aplay -q /usr/share/sounds/alsa/Front_Center.wav
 }                                         #  soundCheck()

#+--------------------------------------------------------------------------+
function doIt
# List much information about the OVOS environment 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local theType 
  if [ "$clear" = "yes" ]; then            # clear the screen
    clear     
  fi

  # check for Neon, Minimy or OVOS services
  echo "$dashes"              
  if [ -d /etc/neon ]; then                # assume Neon
    theType="neon"
    echo "Neon services:"
    for nextService in neon-admin-enclosure neon-audio neon-bus neon-enclosure neon-gui neon-skills neon-speech; do
      listService $nextService root        # Neon runs as root
    done
  elif [ -d $HOME/minimy ]; then           # assume Minimy
    theType="minimy"
    listMinimy
  elif [ -d $HOME/.venvs/ovos ]; then      # assume OVOS
    theType="ovos"
    echo "OVOS services:"
    lsovos
  else                                     # assume none of the three are installed
    theType="none"
    printf '%23s \e[31m%s\e[0m\n' "Ovos/Neon/Minimy:" "Not installed" # in red
  fi  
  if [ -f "/usr/bin/pipewire" ]; then      # pipewire and wireplumber do audio 
    echo "$dashes"              
    listService pipewire user     
    echo "$dashes"              
    listService wireplumber user
  else                                     # assume pulseaudio does audio
    echo "$dashes"              
    listService pulseaudio root 
  fi
  echo "$dashes"              
  listService redis root
  echo "$dashes"              
  if command -v systemctl &>/dev/null; then     # Using SystemD
    listService mpd user
  else
    listService mpd root                   # MPD runs as root on OpenRC
  fi
  echo "$dashes"              
  listService whisper root                 # whisper does STT as root
  if [ "$justServices" = "yes" ]; then     # all done
    exit
  fi      

  # also list many other settings and status 
  echo "$dashes"              
  local theVersion
  local distro=`grep ^PRETTY /etc/os-release | awk -F'"' '{print $2}'` # get the pretty name
  printf "%22s: %s\n" "Distro" "$distro"
  local kernel=`uname -r`
  printf "%22s: %s\n" "Kernel" "$kernel"
  if [ "$theType" = neon ]; then
    theVersion=`neonver`
    printf "%20s: %s\n" "Neon version" "$theVersion"
  elif [ "$theType" = minimy ]; then
    if [ -f $HOME/minimy-mike99mac/version ]; then 
      theVersion=`cat $HOME/minimy-mike99mac/version`     
      printf "%22s: %s\n" "Minimy version" "$theVersion"
    fi
  elif [ "$theType" = ovos ]; then
    theVersion=`ovosver`
    printf "%22s: %s\n" "OVOS version" "$theVersion"
  fi
  if [ ${#VIRTUAL_ENV} != 0 ]; then
    printf "%22s: %s\n" "VIRTUAL_ENV" "$VIRTUAL_ENV"
  fi

  local IPaddr=`ip -4 addr show | grep -oP '192\.\d+\.\d+\.\d+' | head -n1` # get the IP address
  printf "%22s: %s\n" "IP address" "$IPaddr"
  listTemp                                 # RasPi temperature

  # root file system usage
  local rootUsed=`df -h / | tail -1 | awk '{print $5}'`
  printf "%22s: %s\n" "Root fs usage" "$rootUsed"
  getCPU                                   # CPU usage

  # memory usage
  echo "$moreDashes"              
  echo "Memory usage:"
  free -h | sed 's/^/  /g'                 # add two leading spaces

  # are log directories using tmpfs? 
  echo "$moreDashes"              
  if [ "$theType" = neon ]; then
    echo "tmpfs filesystems: "
    tmpfsUsage $HOME/.local/state/neon Neon logs
  elif [ "$theType" = ovos ]; then
    echo "tmpfs filesystems: "
    tmpfsUsage $HOME/.local/state/mycroft OVOS logs
  elif [ "$theType" = minimy ]; then
    echo "tmpfs filesystems: "
    tmpfsUsage $HOME/minimy/logs Minimy logs
    tmpfsUsage $HOME/minimy/tmp Minimy temp dir
  else
    printf "%23s\n" "tmpfs filesystems:"
  fi
  echo "$moreDashes"              
  soundCheck                               # check play and record
  echo "$moreDashes"              
  echo
 }                                         # doIt()

#+--------------------------------------------------------------------------+
# Global variables
platform="unknown"                         # can be Nvidia or RasPi
clear="no"                                 # clear the screen first?
dashes="---------------------------------------"
justServices="no"                          # just show services?
moreDashes="----------------------------------------------------------------------------------"
verbose=1                                 

# main()
parseArgs $@                               # parse arguments
getPlatform                                # either Nvidia or RasPi
doIt                                       # create output  

