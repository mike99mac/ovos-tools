#!/bin/bash
#
# installovos - create a venv then install OVOS into it
#
#+--------------------------------------------------------------------------+
function usage
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo
  echo "Name:  installovos - install OVOS in a virtual environment"
  echo "Usage: installovos [OPTIONS]"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -m|--mike99mac    Try Mike Mac's experimental approach"
  echo "  -v|--verbose      Increase verbosity"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  echo "  -y|--yes          Do not prompt to remove old venv"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments
# Args: All arguments passed in 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -m|--mike99mac)                      # try Mike Mac's experimental code
        installType="mike99mac"
        ;;
      -v|--verbose)
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      -y|--yes)                            # do not prompt
         yes="yes"
         ;;
      *)
        echo "ERROR: Unrecognized argument: $1"
        usage
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function runCmd
# run a command, report time spent and exit if it failes
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local timeStamp=`date +"%y-%m-%d-%H:%M:%S"`      # YY-MM-DD-HH:MM:SS
  cmd="$@"                                 # get all args
  echo "$timeStamp - Running: $cmd ..." | tee -a $logFile # show the command and send to output file
  eval $cmd >> $logFile 2>&1               # run the command
  rc=$?
  if [ "$rc" != 0 ]; then                  # it failed
    echo "ERROR: $cmd returned $rc" | tee -a $logFile
    exit 1
  fi
 }                                         # runCmd()

#+--------------------------------------------------------------------------+
function useInstaller
# Install OVOS with goldyfruit's installer.sh 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  # first be sure scenario.yaml is present to automate the install
  local configDir="$HOME/.config/ovos-installer"
  local configFile="$configDir/scenario.yaml"

  if [ ! -d $configDir ]; then             # config directory does not exist
    runCmd mkdir -p $configDir
  fi

  if [ ! -f $configFile ]; then            # config file does not exist
    if [ ! -f $HOME/ovos-tools/scenario.yaml ]; then # not expected
      echo "ERROR: unexpected $HOME/ovos-tools/scenario.yaml not found - is ovos-tools installed?"
      exit 1
    fi
    runCmd cp $HOME/ovos-tools/scenario.yaml $configDir
  fi 

  # run the installer
  cd                                       # start in the home directory
  runCmd curl -s https://raw.githubusercontent.com/OpenVoiceOS/ovos-installer/main/installer.sh -o installer.sh
  runCmd chmod +x installer.sh 
  echo "Installing OVOS with install.sh ... this will take some time ... Log File: $logFile" 
  runCmd sudo ./installer.sh
 }                                         # useInstaller()

#+--------------------------------------------------------------------------+
function installWithGit 
# install package with git clone
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd git clone https://github.com/OpenVoiceOS/$thePkg 
 }                                         # installWithGit()

#+--------------------------------------------------------------------------+
function installWithPip
# install package with "pip install"
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd pip install $thePkg 
 }                                         # installWithPip()

#+--------------------------------------------------------------------------+
function installWithGitPip 
# install package with "pip install git+URL"
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd pip install git+https://github.com/OpenVoiceOS/$thePkg 
 }                                         # installWithGitPip()

#+--------------------------------------------------------------------------+
function copyServiceFile
# Copy a systemd service file from ovos-tools to run as root or user then enable and start it
# Arg 1: service file name
# Arg 2: "root" or "user"
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local serviceName="$1"
  local serviceType=$2    
  local serviceFQDN="$HOME/ovos-tools/$1.service"

  if [ ! -f $serviceFQDN ]; then
    echo "ERROR: service file $serviceFQDN not found - is ovos-tools installed?"
    exit 2
  fi    
  if [ ! -d $systemdDir ]; then            # systemd directory does not exist
    local cmd="mkdir -p $HOME/.config/system/user"
    runCmd $cmd
  fi

  if [ "$serviceType" = root ]; then       # copy to systemd system directory
    runCmd sudo cp $serviceFQDN /etc/systemd/system
    runCmd sudo systemctl enable $serviceName 
    runCmd sudo systemctl start $serviceName 
  elif [ "$serviceType" = user ]; then     # copy to systemd user directory
    runCmd sudo cp $serviceFQDN /etc/systemd/user
    runCmd systemctl --user enable $serviceName
    runCmd systemctl --user start $serviceName
  else                                     # not expected
    echo "INTERNAL ERROR: serviceType = $serviceType"
    exit 3
  fi
 }                                         # copyServiceFile()

#+--------------------------------------------------------------------------+
function useMike99mac
# Install OVOS with goldyfruit's installer.sh
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}


  if [ ! -f $HOME/ovos-tools/ovos.git.packages  ]; then
    echo "ERROR: $HOME/ovos-tools/ovos.git.packages not found - is ovos-tools installed?" | tee -a $logFile
    exit 1
  fi
  
  echo | tee -a $logFile
  echo "Creating a virtual environment ..." | tee -a $logFile
  runCmd mkdir -p $HOME/.venvs/ovos
  runCmd python3 -m venv $HOME/.venvs/ovos

  echo | tee -a $logFile
  echo "Activating virtual environment ..." | tee -a $logFile
  runCmd source $HOME/.venvs/ovos/bin/activate
  local pyVer=`python --version | awk '{print $2}' | awk -F. '{print $1 "." $2}'`
  cd $HOME/.venvs/ovos/lib/python$pyVer/site-packages

  echo | tee -a $logFile
  echo "Installing packages with apt-get ..." | tee -a $logFile
  runCmd sudo apt-get install -y build-essential python3-dev swig libssl-dev libfann-dev libpulse-dev libasound2-dev mpg123 portaudio19-dev python3-pyaudio liblapack-dev libopenblas-dev flac
  
  echo | tee -a $logFile
  echo "Installing wheel with pip install ..." | tee -a $logFile
  runCmd pip install wheel                 # wheel needs to be in place before other packages 

  echo | tee -a $logFile
  echo "Installing ovos-core ..." | tee -a $logFile
  runCmd "pip install ovos-core"

  # some packages are "git clone"d, some just use pip and others need pip+git
  local nextPkg
  echo "Installing ovos packages with pip ..." | tee -a $logFile
  local pipPkgs=`cat $HOME/ovos-tools/ovos.pip.packages | xargs`
  for nextPkg in $pipPkgs; do
    installWithPip $nextPkg
  done

  echo "Installing ovos packages with install ..." | tee -a $logFile
  local pipPkgs=`cat $HOME/ovos-tools/ovos.pip+git.packages | xargs`
  for nextPkg in $pipPkgs; do
    installWithGitPip $nextPkg
  done

  echo "Installing ovos packages with git ..." | tee -a $logFile
  local gitPkgs=`cat $HOME/ovos-tools/ovos.git.packages | xargs`
  for nextPkg in $gitPkgs; do
    installWithGit $nextPkg
  done
  
  # copy executables which don't end up in $HOME/.venvs/ovos/bin for some reason
  echo | tee -a $logFile
  echo "Copying ovos-core file ..." | tee -a $logFile
  runCmd cp $HOME/ovos-tools/ovos-core $HOME/.venvs/ovos/bin
  echo | tee -a $logFile
  echo "Copying ovos-audio file ..." | tee -a $logFile
  runCmd cp $HOME/ovos-tools/ovos-audio $HOME/.venvs/ovos/bin
  echo | tee -a $logFile
  echo "Copying ovos-messagebus file ..." | tee -a $logFile
  runCmd cp $HOME/ovos-tools/ovos-messagebus $HOME/.venvs/ovos/bin
  echo | tee -a $logFile
  echo "Copying ovos_PHAL_admin file ..." | tee -a $logFile
  runCmd cp $HOME/ovos-tools/ovos_PHAL_admin $HOME/.venvs/ovos/bin

  echo | tee -a $logFile
  echo "Copying .service files and setting to run at boot time .." | tee -a $logFile
  copyServiceFile ovos-phal-admin root     # the one service that runs as root
  for nextService in ovos-messagebus ovos-phal ovos-audio ovos-core ovos-listener ovos-media; do
    copyServiceFile $nextService user
  done
 }                                         # useMike99mac()

#+--------------------------------------------------------------------------+
function installOVOS
# Do the work to install ovos-core and all ancillary packages into a venv
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local date=`date`
  echo "Running installovos installType = $installType ..." | tee -a $logFile
  if [ -d $HOME/.venvs ]; then                 #  directory exists
    if [ "$1" != "-y" ]; then
      echo -n "$HOME/.venvs directory exists - do you want to remove it and rebuild? (y/n) "
      read ans
      if [ "$ans" != y -a "$ans" != Y ]; then
        exit 4
      fi
    fi
    echo "removing $HOME/.venvs directory ..."
    sudo /usr/bin/rm -fr $HOME/.venvs | tee -a $logFile
    if [ $? != 0 ]; then
      echo "/usr/bin/rm -fr $HOME/.venvs returned $? trying again ..."
      /usr/bin/rm -fr $HOME/.venvs | tee -a $logFile
      if [ $? != 0 ]; then
        echo "/usr/bin/rm -fr $HOME/.venvs failed again with $? ... punt! ..." | tee -a $logFile
        exit 5
      fi
    fi
  fi

  # perform one of two install types
  if [ "$installType" = "goldyfruit" ]; then # use installer.sh
    useInstaller
  elif [ "$installType" = "mike99mac" ]; then # use Mike's code
    useMike99mac
  else
    echo "ERROR: unexpected: installType = $installType"
    exit 1
  fi

  # for longer main memory life, write OVOS logs to a tmpfs
  local mountFile="home-pi-.local-state-mycroft.mount"
  if [ ! -f /etc/systemd/system/$mountFile  ]; then # mount file has not been copied
    local srcFile="$HOME/ovos-tools/$mountFile"
    if [ ! -f $srcFile ]; then             # not expected
      echo "ERROR: mount file $srcFile not found"
      exit 1
    fi
    echo "Copying and enabling mount file $mountFile ..." | tee -a $outFile
    runCmd sudo cp $srcFile /etc/systemd/system
    runCmd sudo systemctl daemon-reload 
    runCmd sudo systemctl enable $mountFile 
    runCmd sudo systemctl start $mountFile 
  fi
 }                                         # installOVOS()

# main()
curPkg=0                                   # current package being installed
installType="goldyfruit"                   # install code to use - default - installer.sh
pkgCnt=0                                   # of packages
verbose=1                                  # verbosity
yes="no"

parseArgs $@                               # parse arguments
timeStamp=`date +"%y-%m-%d-%H:%M:%S"`      # YY-MM-DD-HH:MM:SS
logFile="$HOME/$timeStamp-installovos.out" # output file
pkgCnt=`wc -l $HOME/ovos-tools/*.packages | tail -1 | awk '{print $1}'`

installOVOS $@                             # do the work
let min=$SECONDS/60                        # show time spent installing
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "Successfully installed OVOS in $min:$sec" | tee -a $logFile
echo
echo "Log file: $logFile"

