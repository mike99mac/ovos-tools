#!/bin/bash
#
# installneon - Install the Neon personal voice assistant
#
#+--------------------------------------------------------------------------+
function usage
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo
  echo "Name:  installneon - install Neon in a virtual environment"
  echo "Usage: installneon [OPTIONS]"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -m|--mike99mac    Try Mike Mac's experimental approach"
  echo "  -v|--verbose      Increase verbosity"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  echo "  -y|--yes          Do not prompt to remove old venv"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments
# Args: All arguments passed in 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -v|--verbose)
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      -y|--yes)                            # do not prompt
         yes="yes"
         ;;
      *)
        echo "ERROR: Unrecognized argument: $1"
        usage
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function runCmd
# run a command, report time spent and exit if it failes
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local timeStamp=`date +"%y-%m-%d-%H:%M:%S"`      # YY-MM-DD-HH:MM:SS
  cmd="$@"                                 # get all args
  echo "$timeStamp - Running: $cmd ..." | tee -a $logFile # show the command and send to output file
  eval $cmd >> $logFile 2>&1               # run the command
  rc=$?
  if [ "$rc" != 0 ]; then                  # it failed
    echo "ERROR: $cmd returned $rc" | tee -a $logFile
    exit 1
  fi
 }                                         # runCmd()

#+--------------------------------------------------------------------------+
function installWithGit 
# install package with git clone
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd git clone https://github.com/OpenVoiceOS/$thePkg 
 }                                         # installWithGit()

#+--------------------------------------------------------------------------+
function installWithPip
# install package with "pip install"
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd pip install $thePkg 
 }                                         # installWithPip()

#+--------------------------------------------------------------------------+
function installWithGitPip 
# install package with "pip install git+URL"
# Arg 1: the URL to install
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local thePkg="$@"
  let curPkg=$curPkg+1
  echo | tee -a $logFile
  echo "Installing package $curPkg of $pkgCnt: $thePkg..." | tee -a $logFile
  runCmd pip install git+https://github.com/OpenVoiceOS/$thePkg 
 }                                         # installWithGitPip()

#+--------------------------------------------------------------------------+
function installNeon
# Do the work to install Neon 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local date=`date`
  echo "Running installneon ..." | tee -a $logFile
  if [ -d $HOME/.venvs ]; then                 #  directory exists
    if [ "$1" != "-y" ]; then
      echo -n "$HOME/.venvs directory exists - do you want to remove it and rebuild? (y/n) "
      read ans
      if [ "$ans" != y -a "$ans" != Y ]; then
        exit 4
      fi
    fi
    echo "removing $HOME/.venvs directory ..."
    sudo /usr/bin/rm -fr $HOME/.venvs | tee -a $logFile
    if [ $? != 0 ]; then
      echo "/usr/bin/rm -fr $HOME/.venvs returned $? trying again ..."
      /usr/bin/rm -fr $HOME/.venvs | tee -a $logFile
      if [ $? != 0 ]; then
        echo "/usr/bin/rm -fr $HOME/.venvs failed again with $? ... punt! ..." | tee -a $logFile
        exit 5
      fi
    fi
  fi

  # useInstaller

  # for longer main memory life, write Neon logs to a tmpfs
  local mountFile="home-pi-.local-state-mycroft.mount"
  if [ ! -f /etc/systemd/system/$mountFile  ]; then # mount file has not been copied
    local srcFile="$HOME/ovos-tools/$mountFile"
    if [ ! -f $srcFile ]; then             # not expected
      echo "ERROR: mount file $srcFile not found"
      exit 1
    fi
    echo "Copying and enabling mount file $mountFile ..." | tee -a $outFile
    runCmd sudo cp $srcFile /etc/systemd/system
    runCmd sudo systemctl daemon-reload 
    runCmd sudo systemctl enable $mountFile 
    runCmd sudo systemctl start $mountFile 
  fi
 }                                         # installNeon()

# main()
curPkg=0                                   # current package being installed
pkgCnt=0                                   # of packages
verbose=1                                  # verbosity
yes="no"

parseArgs $@                               # parse arguments
timeStamp=`date +"%y-%m-%d-%H:%M:%S"`      # YY-MM-DD-HH:MM:SS
logFile="$HOME/$timeStamp-installneon.out" # output file
pkgCnt=`wc -l $HOME/ovos-tools/*.packages | tail -1 | awk '{print $1}'`

installNeon $@                             # do the work
let min=$SECONDS/60                        # show time spent installing
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "Successfully installed Neon in $min:$sec" | tee -a $logFile
echo
echo "Log file: $logFile"

