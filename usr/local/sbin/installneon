#!/bin/bash
#
# installneon - Install packages, etc. for the Neon personal voice assistant
#
#+--------------------------------------------------------------------------+
function usage
# Give help 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo
  echo "Name:  installneon - install Neon in a virtual environment"
  echo "Usage: installneon [OPTIONS]"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -v|--verbose      Increase verbosity"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs
# Parse arguments
# Args: All arguments passed in 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -v|--verbose)
        verbose=2
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
        echo "ERROR: Unrecognized argument: $1"
        usage
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function runCmd
# run a command, report time spent and exit if it failes
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local timeStamp=`date +"%y-%m-%d-%H-%M-%S"` 
  cmd="$@"                                 # get all args
  echo "$timeStamp - Running: $cmd ..."    # show the command and send to output file
  eval $cmd                                # run the command
  rc=$?
  if [ "$rc" != 0 ]; then                  # it failed
    echo "ERROR: $cmd returned $rc" 
    exit 1
  fi
 }                                         # runCmd()

#+--------------------------------------------------------------------------+
function addGroupsUsers
# Configure docker group and user 
# If group named docker e
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local groupExists="yes"                  # assume group docker exists
  local userExists="yes"                   # assume user docker exists
  getent group docker >/dev/null 2>&1
  if [ $? != 0 ]; then                     # group docker does not exist
    groupExists="no"
  fi    
  id docker >/dev/null 2>&1           
  if [ $? != 0 ]; then                     # user docker does not exist
    userExists="no"
  fi
  if [ "$groupExists" = yes -a "$userExists" = yes ]; then # nothing to do
    echo "User and group 'docker' already exist"
    return
  fi
  if [ "$groupExists" = no -a "$userExists" = yes ]; then
    echo "ERROR: user docker exists, but group does not"
    return 1
  fi
  if [ "$groupExists" = yes -a "$userExists" = no ]; then
    echo "ERROR: group docker exists, but user does not"
    return 1
  fi
    
  runCmd sudo groupadd -g $dockerGID docker
  if [ $? != 0 ]; then                     # cannot proceed
    echo "ERROR: sudo groupadd -g $dockerGID docker returned $?"
    return 1
  fi
  runCmd sudo useradd -g $dockerGID -u $dockerUID docker
  if [ $? != 0 ]; then                     # cannot proceed
    echo "ERROR: sudo useradd -g $dockerGID -u $dockerUID docker returned $?"
    return 1
  fi
 }                                         # addGroupsUsers()

#+--------------------------------------------------------------------------+
function installNeon
# Do the work to install Neon 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ ! -d "$HOME/NeonCore/docker" ]; then # Neon repo not installed
    echo "ERROR: directory $HOME/NeonCore/docker does not exist"
    echo "       Did you install Neon in your home directory with: git clone https://github.com/NeonGeckoCom/NeonCore"
    exit 1
  fi

  echo "Adding users and groups ..."
  addGroupsUsers                           # add group and user 'docker'
  if [ $? != 0 ]; then
    echo "addGroupsUsers() failed - exiting"
    exit 1
  fi

  echo "Installing corequisite packages ..."
  runCmd sudo apt install -y docker docker-compose
  if [ $? != 0 ]; then
    echo "apt install -y docker docker-compose failed - exiting"
    exit 1
  fi

  # check if docker is a group of current user
  id | awk -F"groups=" '{print $2}' | grep docker >/dev/null
  if [ $? != 0 ]; then                      # docker is not a group of current user
    echo "Adding docker as a group of $USER ..."
    runCmd sudo gpasswd -a $USER docker
    # cannot run newgrp in a script ...
    echo "Please start a new shell and run $0 again ..."
  else
    echo "Starting Neon with docker-compose ..." 
    cd $HOME/NeonCore/docker
    runCmd docker-compose up -d 
  fi
 }                                         # installNeon()

# main()
dockerUID=1017                             # change if UID 1017 is taken
dockerGID=1017                             # change if GID 1017 is taken
verbose=1                                  # verbosity

parseArgs $@                               # parse arguments
timeStamp=`date +"%y-%m-%d-%H-%M-%S"`      
logFile="$HOME/$timeStamp-installneon.out" # output file
echo "Running installneon ..." | tee $logFile # create log file
installNeon $@ | tee -a $logFile 2>&1      # send stdout and stderr to log file
let min=$SECONDS/60                        # show time spent installing
let sec=$SECONDS%60
if [ $sec -lt 10 ]; then                   # add a leading 0
  sec="0$sec"
fi
echo "Successfully installed Neon in $min:$sec" | tee -a $logFile
echo
echo "Log file: $logFile"

