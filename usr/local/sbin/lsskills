#!/bin/bash
#
# lsskills - list skills installed or uninstalled 
#
#+--------------------------------------------------------------------------+
function usage()
# Give help to the user
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  echo "Name: lsskills - List OVOS/Neon skills "
  echo "Usage: lsskills [OPTIONS] [PATTERN]"
  echo "Where: PATTERN is an optional string pattern to search for"
  echo ""
  echo "OPTIONS:"
  echo "  -h|--help         Give help (this screen)"
  echo "  -a|--all          List both installed and uninstalled skills" 
  echo "  -l|--long         Long listing - get details from README or METADATA files"
  echo "  -u|--uninstalled  Only list skills not installed" 
  echo "  -v|--verbose      Verbose output"
  echo "  -x|--debug        Print commands and arguments as they are executed"
  exit 51
 }                                         # usage()

#+--------------------------------------------------------------------------+
function parseArgs()
# Parse arguments
# Args: All arguments passed into script
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  while [ -n "$1" ]                        # loop through args passed in
  do
    case "$1" in
      -h|--help)
        usage
        ;;
      -a|--all)                        
        skillsType="all"
        ;;
      -l|--long)
         outputType=long 
         ;;
      -u|--uninstalled)               
        skillsType="uninstalled"
        ;;
      -v|--verbose) 
        verbose=2 
        ;;
      -x|--debug)                          # turn trace on
         set -vx
         ;;
      *)
	if [ ${#pattern} != 0 ]; then      # PATTERN already passed
	  echo "ERROR: Too many arguments: $1"
	  usage 
        else
          pattern=$1
	  skillsType="installed"
	fi   
        ;;
    esac
    shift
  done
 }                                         # parseArgs()

#+--------------------------------------------------------------------------+
function verboseMsg()
# Print a message when in verbose mode
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ "$verbose" -gt 1 ]; then            # in verbose mode
   echo "$@"
  fi
 }                                         # verboseMsg()

#+--------------------------------------------------------------------------+
function listMinimySkills()
# List the Minimy skills installed
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  if [ "$outputType" = short ]; then
    ps -ef | grep user_skills | grep -v grep | awk -F/ '{print $NF}'
  else
    ps -ef | grep user_skills 
  fi
 }                                         # listMinimySkills()

#+--------------------------------------------------------------------------+
function listSkills()
# List the OVOS/Neon skills by search log files for "loaded successfully" 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local logDir=$1
  cd $logDir
  local skills=`grep "loaded successfully" skills.log 2>/dev/null`
  skills=`echo "$skills" | awk '{print \$11}' | sort`
  if [ "$outputType" = short ]; then 
    local numSkills=`echo "$skills" | wc -l`
    verboseMsg "found $numSkills skills:"
    echo "$skills"
  else
    echo "TODO: write code for long output"
#   local MDfile
#   local nextSkillDir
#   local skillsDirs
#   skillsDirs=`eval $cmd | grep -v dist-info | awk '{print $9}' | xargs` 
#   for nextSkillDir in $skillsDirs; do 
#     if [ -f ${nextSkillDir}/README.md ]; then # README file not found
#       MDfile="${nextSkillDir}/README.md"
#     elif [ -f ${nextSkillDir}-*.dist-info/METADATA ]; then # METADATA file not found
#       MDfile="${nextSkillDir}-*.dist-info/METADATA"
#     else                                 # no markdown file found
#       echo "WARNING: could not find metadata in $nextSkillDir"
#       return
#     fi
#     echo "Skill in directory $nextSkillDir"
#     if [ -x /usr/bin/pandoc ]; then      # format the markdown
#       pandoc -t plain $MDfile
#     else
#       cat $MDfile
#     fi 
#   done
  fi
 }                                         # listSkills()

#+--------------------------------------------------------------------------+
function doTheWork()
# List either Minimy or OVOS skills 
#+--------------------------------------------------------------------------+
 {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}

  local logDir
  if [ -d $HOME/.local/state/neon ]; then      # assume this is a Neon box
    logDir="$HOME/.local/state/neon"
  elif [ -d $HOME/.local/state/mycroft ]; then # assume OVOS
    logDir="$HOME/.local/state/mycroft"
  else
    echo "ERROR: could not find log dir in $HOME/.local/state/neon nor $HOME/.local/state/mycroft"
    exit 1
  fi

  if [ -d $logDir ]; then
    listSkills $logDir
  else
    echo "Did not find logs directory $logDir"
    exit 1
  fi
 }                                         # doTheWork()

#+--------------------------------------------------------------------------+
# Global variables"
lang="en-us"                                # language
output=""                                   # the output string 
outputType="short"                          # 'short' or 'long' listing
pattern=""                                  # optional search pattern
skillsType="installed"                      # show skills 'installed', 'uninstalled', or 'all'
verbose="1"                                 # verbosity level

# main()
parseArgs $@ 
doTheWork 

